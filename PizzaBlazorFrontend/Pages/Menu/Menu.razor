@page "/Menu"
@using PizzaDataLibrary.BusinessLogic
@using PizzaDataLibrary.Models

@inject IMenuProductData _db

<h3>Таблица меню</h3>
<p>На данной странице отображена таблица Menu из БД PizzaDB</p>

@if (products == null)
{
    <p><em>Идёт загрузка данных..</em></p>
}
else
{
    @if (!_isSearching)
    {
<DxDataGrid Data="@products"
            RowInsertingAsync="@OnRowInserting"
            RowUpdating="@OnRowUpdating"
            RowRemovingAsync="@OnRowRemoving"
            EditMode="DataGridEditMode.PopupEditForm"
            @ref="@_gridRef">
    <DxDataGridColumn Field="@nameof(MenuProductModel.ProductId)" Caption="Id продукта" EditorVisible=false></DxDataGridColumn>
    <DxDataGridColumn Field="@nameof(MenuProductModel.ProductName)" Caption="Название продукта"></DxDataGridColumn>
    <DxDataGridSpinEditColumn Field="@nameof(MenuProductModel.ProductPrice)" Caption="Цена"></DxDataGridSpinEditColumn>
    <DxDataGridColumn Field="@nameof(MenuProductModel.ProductDescription)" Caption="Описание"></DxDataGridColumn>
    <DxDataGridColumn Field="@nameof(MenuProductModel.ProductMarks)" Caption="Пометки"></DxDataGridColumn>
    <DxDataGridCommandColumn></DxDataGridCommandColumn>
</DxDataGrid>
    }
    else
    {
        
    }
}
@code {
    private List<MenuProductModel> products;
    DxDataGrid<MenuProductModel> _gridRef;
    private bool _isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        products = await _db.GetProductsList();
    }

    async Task OnRowRemoving(MenuProductModel dataItem)
    {

    //Удаляем из БД 
        await _db.RemoveProduct(dataItem);
    //Удаляем из листа
        products.Remove(dataItem);
    //Обновляем таблицу
        await _gridRef.Refresh();
    }

    void OnRowUpdating(MenuProductModel dataItem, IDictionary<string, object> newValue)
    {
        //Заполняем объект для отправки в БД
        foreach (var (key, val) in newValue)
        {
            switch (key)
            {
                case "ProductName":
                    dataItem.ProductName = newValue["ProductName"].ToString();
                    break;
                case "ProductPrice":
                    dataItem.ProductPrice = (float) newValue["ProductPrice"];
                    break;
                case "ProductDescription":
                    dataItem.ProductDescription = newValue["ProductDescription"].ToString();
                    break;
                case "ProductMarks":
                    dataItem.ProductMarks = newValue["ProductMarks"].ToString();
                    break;

            }
        }
        //Отправляем его в БД
        _db.UpdateProduct(dataItem);
    }

    async Task OnRowInserting(IDictionary<string, object> newValue)
    {
        //Создаём новый объект и заполняем его
        var newProduct = new MenuProductModel();
        foreach (var (key, val) in newValue)
        {
            switch (key)
            {
                case "ProductName":
                    newProduct.ProductName = newValue["ProductName"].ToString();
                    break;
                case "ProductPrice":
                    newProduct.ProductPrice = (float)newValue["ProductPrice"];
                    break;
                case "ProductDescription":
                    newProduct.ProductDescription = newValue["ProductDescription"].ToString();
                    break;
                case "ProductMarks":
                    newProduct.ProductMarks = newValue["ProductMarks"].ToString();
                    break;

            }
        }
        
        //Добавляем его в БД и возвращаем id
        int id = await _db.AddProduct(newProduct);
        newProduct.ProductId = id;
    //Добавляем его в лист
        products.Add(newProduct);
        //Обновляем отображение
        await _gridRef.Refresh();
    }

    public async void Search()//здесь будут параметры поиска
    {
        
    }
}
