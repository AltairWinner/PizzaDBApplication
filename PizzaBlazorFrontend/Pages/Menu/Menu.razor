@page "/Menu"
@using PizzaDataLibrary.BusinessLogic
@using PizzaDataLibrary.Models
@using Microsoft.Extensions.Logging

@inject IMenuProductData _db

<h3>Таблица меню</h3>
<p>На данной странице отображена таблица Menu из БД PizzaDB</p>

@if (products == null)
{
    <p><em>Идёт загрузка данных..</em></p>
}
else
{
    <!--
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id продукта</th>
                <th>Название продукта</th>
                <th>Цена</th>
                <th>Описание</th>
                <th>Пометки</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var product in products)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@product.ProductName</td>
                    <td>@product.ProductPrice</td>
                    <td>@product.ProductDescription</td>
                    <td>@product.ProductMarks</td>
                    <td>


                    </td>
                </tr>
            }
        </tbody>


    </table>
    -->
    
<DxDataGrid Data="@products" 
            RowInserting="@OnRowInserting" 
            RowUpdating="@OnRowUpdating"
            RowRemoving="@OnRowRemoving"
            EditMode="DataGridEditMode.PopupEditForm"
            ShowFilterRow=true>
    <DxDataGridColumn Field="@nameof(MenuProductModel.ProductId)" Caption="Id продукта" EditorVisible=false></DxDataGridColumn>
    <DxDataGridColumn Field="@nameof(MenuProductModel.ProductName)" Caption="Название продукта"></DxDataGridColumn>
    <DxDataGridSpinEditColumn Field="@nameof(MenuProductModel.ProductPrice)" Caption="Цена"></DxDataGridSpinEditColumn>
    <DxDataGridColumn Field="@nameof(MenuProductModel.ProductDescription)" Caption="Описание"></DxDataGridColumn>
    <DxDataGridColumn Field="@nameof(MenuProductModel.ProductMarks)" Caption="Пометки"></DxDataGridColumn>
    <DxDataGridCommandColumn></DxDataGridCommandColumn>
</DxDataGrid>

}
@code {
    private List<MenuProductModel> products;

    protected override async Task OnInitializedAsync()
    {
        products = await _db.GetProductsList();

    }

    void OnRowRemoving(MenuProductModel dataItem)
    {
        _db.RemoveProduct(dataItem);
    }

    void OnRowUpdating(MenuProductModel dataItem, IDictionary<string, object> newValue)
    {
        foreach (var (key, val) in newValue)
        {
            switch (key)
            {
                case "ProductName":
                    dataItem.ProductName = newValue["ProductName"].ToString();
                    break;
                case "ProductPrice":
                    dataItem.ProductPrice = (float) newValue["ProductPrice"];
                    break;
                case "ProductDescription":
                    dataItem.ProductDescription = newValue["ProductDescription"].ToString();
                    break;
                case "ProductMarks":
                    dataItem.ProductMarks = newValue["ProductMarks"].ToString();
                    break;

            }
        }

        _db.UpdateProduct(dataItem);
    }

    void OnRowInserting(IDictionary<string, object> newValue)
    {
        var newProduct = new MenuProductModel();
        foreach (var (key, val) in newValue)
        {
            switch (key)
            {
                case "ProductName":
                    newProduct.ProductName = newValue["ProductName"].ToString();
                    break;
                case "ProductPrice":
                    newProduct.ProductPrice = (float)newValue["ProductPrice"];
                    break;
                case "ProductDescription":
                    newProduct.ProductDescription = newValue["ProductDescription"].ToString();
                    break;
                case "ProductMarks":
                    newProduct.ProductMarks = newValue["ProductMarks"].ToString();
                    break;

            }
        }

        _db.AddProduct(newProduct);
    }
}
